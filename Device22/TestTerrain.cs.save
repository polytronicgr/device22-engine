using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Drawing;
using OpenTK;
using OpenTK.Graphics;
using OpenTK.Graphics.OpenGL;
using OpenTK.Audio;
using OpenTK.Audio.OpenAL;
using OpenTK.Input;

namespace Device22
{
    class TestTerrain : GameWindow
    {
        #region Singleton
        //static Game instance = null;
        //static readonly object padlock = new object();

        //public static Game Instance
        //{
        //    get
        //    {
        //        lock (padlock)
        //        {
        //            if (instance == null)
        //            {
        //                instance = new Game();
        //                return instance;
        //            }
        //            //return instance;
        //            return null;
        //        }
        //    }
        //}
        static TestTerrain instance = null;

        public static TestTerrain Instance
        {
            get
            {
                if (instance == null)
                {
                    instance = new TestTerrain();
                    return instance;
                }
                return instance;
            }
        }
        #endregion

        private static bool[] keys = new bool[256];                             // Array Used For The Keyboard Routine
        private static bool[] mouseKeys = new bool[8];
        private static bool[] keyPressed = new bool[8];
        private static bool fullscreen = false;                                 // Fullscreen Flag, Set To Fullscreen Mode By Default

        private Random rand = new Random();
        private Camera camera;
        public Camera Camera
        { get { return camera; } }

        private InputController input;
        private Frustum frustum;
        public static int height = 768;
        public static int width = 1024;

        // Terrain stuff
        private int[] indices;
        private float[] vertices;

        private int indexBuffer = 0;
        private int vertexBuffer = 1;
        private int indicesCount;

        private List<TerrainPatch> patches;

        private Cube cube;


        public TestTerrain()
            : base(width, height, GraphicsMode.Default, "Device 22")
        {
            VSync = VSyncMode.On;
        }

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);

            string version = GL.GetString(StringName.Version);
            int major = (int)version[0];
            int minor = (int)version[2];
            if (major <= 1 && minor < 5)
            {
                System.Windows.Forms.MessageBox.Show("You need at least OpenGL 1.5 to run this example. Aborting.", "Extensions not supported",
                    System.Windows.Forms.MessageBoxButtons.OK, System.Windows.Forms.MessageBoxIcon.Exclamation);
                this.Exit();
            }

            GL.ClearColor(1.0f, 1.0f, 1.0f, 1.0f);
            GL.ClearDepth(1.0d);
            GL.DepthFunc(DepthFunction.Less);
            GL.MatrixMode(MatrixMode.Projection);
            GL.ShadeModel(ShadingModel.Smooth);
            GL.MatrixMode(MatrixMode.Modelview);
            GL.LoadIdentity();
            GL.BlendFunc(BlendingFactorSrc.SrcAlpha, BlendingFactorDest.One);
            GL.Hint(HintTarget.PerspectiveCorrectionHint, HintMode.Nicest);
            GL.Hint(HintTarget.PointSmoothHint, HintMode.Nicest);
            GL.Hint(HintTarget.LineSmoothHint, HintMode.Nicest);
            GL.PolygonMode(MaterialFace.FrontAndBack, PolygonMode.Fill);

            GL.Enable(EnableCap.DepthTest);
            GL.Enable(EnableCap.ColorMaterial);
            GL.FrontFace(FrontFaceDirection.Cw);
            GL.Enable(EnableCap.Lighting);

            camera = new Camera(0.1f, 100.0f);

            GL.Enable(EnableCap.Light0);
            GL.Light(LightName.Light0, LightParameter.Position, new Vector4(new Vector3(0, 0, 0)));
            GL.Light(LightName.Light0, LightParameter.Ambient, new Color4(255, 255, 255, 0));
            GL.Light(LightName.Light0, LightParameter.Diffuse, new Color4(255, 100, 0, 0));

            Game.MouseFunctions.setPosition(new Point(TestTerrain.width >> 1, TestTerrain.height >> 1));
            Mouse.ButtonDown += new EventHandler<MouseButtonEventArgs>(mouseDownEvents);
            //Mouse.Move += new EventHandler<MouseMoveEventArgs>(Primitive.MouseMoveEvent);             // Object picking

            if (!loadContent()) { Console.WriteLine("Error loading content"); }
        }

        private void mouseDownEvents(object sender, MouseButtonEventArgs m)
        {
            if (m.Button == MouseButton.Right)
            {
                keyPressed[(int)MouseButton.Right] = true;
            }
            if (m.Button == MouseButton.Left)
            {
                keyPressed[(int)MouseButton.Left] = true;
            }
        }

        private bool loadContent()
        {
            //Core.Shader.Init();

            //frustum = new Frustum();

            cube = new Cube(1);
            cube.setColor(new ColorRGBA(180, 20, 20, 0));
            cube.setPosition(new Vector3(13, -5, -5));

            int terrainSize = 128;
            terrainSize++;
            int patchSize = 64;

            Vector3 terrainScale = new Vector3(1, 1, 1);

            int indicesSize = patchSize;
            indices = new int[(indicesSize * indicesSize) * 2 * 3];

            int index = 0;
            for (int z = 0; z < indicesSize - 1; z++)     // -1 oder -2 (Im alten Code habe ich pSize-2 stehen) // -1: weil 2x+1
            {
                for (int x = 0; x < indicesSize - 1; x++)
                {
                    indices[index++] = x + z * indicesSize;
                    indices[index++] = (x + 1) + z * indicesSize;
                    indices[index++] = x + (z + 1) * indicesSize;
                    indices[index++] = x + (z + 1) * indicesSize;
                    indices[index++] = (x + 1) + z * indicesSize;
                    indices[index++] = (x + 1) + (z + 1) * indicesSize;

                }
            }

            // For debug
            int size;
            indicesCount = indices.Length;

            // Create Index buffer 
            GL.GenBuffers(1, out indexBuffer);
            GL.BindBuffer(BufferTarget.ArrayBuffer, indexBuffer);
            GL.BufferData(BufferTarget.ArrayBuffer, (IntPtr)(indicesCount * BlittableValueType.StrideOf(indices)), indices, BufferUsageHint.StaticDraw);
            GL.GetBufferParameter(BufferTarget.ArrayBuffer, BufferParameterName.BufferSize, out size);
            if (indicesCount * BlittableValueType.StrideOf(indices) != size) { throw new ApplicationException("Error: (Class: Terrain) indices data not uploaded correctly"); }


            /*
            Vector3[] vertArray = new Vector3[terrainSize * terrainSize];

            index = 0;
            for (int z = 0; z < terrainSize; z++)
            {
                for (int x = 0; x < terrainSize; x++)
                {
                    index = (z * terrainSize) + x;
                    vertArray[index] = new Vector3(x * terrainScale.X, 0, z * terrainScale.Z);
                }
            }

            index = 0;
            vertices = new float[terrainSize * terrainSize * 3];
            foreach (Vector3 vert in vertArray)
            {
                vertices[index++] = vert.X;
                vertices[index++] = vert.Y;
                vertices[index++] = vert.Z;
            }

            int verticesCount = vertices.Length;

            // Create Vertex buffer
            GL.GenBuffers(1, out vertexBuffer);
            GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBuffer);
            GL.BufferData(BufferTarget.ArrayBuffer, (IntPtr)(verticesCount * BlittableValueType.StrideOf(vertices)), vertices, BufferUsageHint.StaticDraw);
            GL.GetBufferParameter(BufferTarget.ArrayBuffer, BufferParameterName.BufferSize, out size);
            if (verticesCount * BlittableValueType.StrideOf(vertices) != size) { throw new ApplicationException("Error: (Class: Terrain) vertex data not uploaded correctly"); }
             * */

            patches = new List<TerrainPatch>();

            for (int z = 0; z < terrainSize; z += patchSize)
            {
                for (int x = 0; x < terrainSize; x += patchSize)
                {
                    patches.Add(new TerrainPatch(x, z, patchSize));
                }
            }

            return true;
        }



        protected override void OnUpdateFrame(FrameEventArgs e)
        {
            base.OnUpdateFrame(e);
            float speed = camera.Speed;

            if (Keyboard[Key.Escape])
                Exit();

            if (Keyboard[Key.P])
                Core.ChangeWireframeMode();

            if (Keyboard[Key.W])
                camera.MoveView(speed);

            if (Keyboard[Key.S])
                camera.MoveView(-speed);

            if (Keyboard[Key.A])
                camera.StrafeView(-speed);

            if (Keyboard[Key.D])
                camera.StrafeView(speed);
        }

        protected override void OnRenderFrame(FrameEventArgs e)
        {
            base.OnRenderFrame(e);
            Title = String.Format("FPS={0:0}", Core.Fps.Get(e.Time));

            GL.Color3(255, 255, 255);
            GL.ClearColor(0.2f, 0.2f, 0.8f, 0.0f);
            //GL.ClearColor(0.0f, 0.0f, 0.0f, 0.0f);
            GL.Clear(ClearBufferMask.ColorBufferBit | ClearBufferMask.DepthBufferBit);
            Matrix4 lookat = Matrix4.LookAt(0, 5, 5, 0, 0, 0, 0, 1, 0);
            GL.MatrixMode(MatrixMode.Modelview);
            //GL.LoadMatrix(ref lookat);

            camera.Look();
            //frustum.CalculateFrustum();

            cube.render(ref frustum);

            /*GL.PushMatrix();
            GL.Translate(50.0f, -5.0f, 0.0f);

            GL.Color3(255, 0, 0);
            GL.EnableClientState(ArrayCap.VertexArray);
            GL.VertexPointer(3, VertexPointerType.Float, 0, vertices);

            GL.DrawElements(BeginMode.Triangles, indices.Length, DrawElementsType.UnsignedInt, indices);

            GL.DisableClientState(ArrayCap.VertexArray);
            GL.PopMatrix();*/

            Core.pushState();
            GL.EnableClientState(ArrayCap.VertexArray);

            /*GL.BindBuffer(BufferTarget.ArrayBuffer, vertexBuffer);
            GL.VertexPointer(3, VertexPointerType.Float, 0, new IntPtr(0));

            GL.BindBuffer(BufferTarget.ElementArrayBuffer, indexBuffer);
            GL.DrawElements(BeginMode.Triangles, indices.Length, DrawElementsType.UnsignedInt, IntPtr.Zero);*/

            foreach (TerrainPatch patch in patches)
            {
                patch.Render(indexBuffer, indicesCount, indices);
            }

            GL.DisableClientState(ArrayCap.VertexArray);
            Core.popState();

            //GL.Flush();
            SwapBuffers();
        }

        /*
        [STAThread]
        static void Main()
        {
            using (TestTerrain testTerrain = TestTerrain.Instance)
            {
                if (testTerrain == null) { Core.ErrorExit("Only one instance of this Game can be started at the same time. Get some real cake, not just a lie!"); }      // Welches Exit() reicht?
                testTerrain.Run();
            }
        }
         * */
    }
}
